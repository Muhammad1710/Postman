{
	"info": {
		"_postman_id": "c7355cbd-617b-48c5-92d9-f549bafbd3c7",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38521720"
	},
	"item": [
		{
			"name": "Check_status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('test', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Body is correct\", () =>{\r",
							"    let data=pm.response.json()\r",
							"    pm.expect(data.status).to.eq(\"OK\")\r",
							"});\r",
							"\r",
							"\r",
							"// Add a test to check if the value of the 'status' key is a string\r",
							"pm.test(\"Value of 'status' key is a string\", ()=> {\r",
							"    pm.expect(pm.response.json().status).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5YzdmNGFiZC1kM2Q3LTRlMzAtOTEwMS01YmU1OTY1NjI0ZDAiLCJqdGkiOiIwY2VjYTk2YmM1ZWNlMWY1YWFkZTM3Y2IxZTg1MTQ3NTlkNmExZWRiZDRlMmM0M2I1MDNhNjVjM2IyY2NjMmI1OWMwY2JmZTFkMmE3ZjJmZSIsImlhdCI6MTcyNjI1MDI3OC44NTM3NjEsIm5iZiI6MTcyNjI1MDI3OC44NTM3NjMsImV4cCI6MTcyODg0MjI3OC44NTEzNjQsInN1YiI6IjEiLCJzY29wZXMiOltdfQ.l3H4GeRTgrdVyhOI0l1Cs2oRrpgINVlATeJIBshAAKUdX5GkYxs1vhOl3Uq1htXH9C6pF0_Q68SAIv9UHsmryHW9ZpsE8H-5xLH7qBCmMpCgwBOtmbLZr1bqZrRBOx6Jjq0GXiaLAQV7B58PXW2rZocNxwvOy5GGXsaoYgWRrxgFUr5F6aZY98f5ieIwdo-4IJ9MRUN-v4AWoX7oEf_gjorLpfvSdjQ8ecnW972Wn1gVz_ZMFngQfVItu5PV4Qqo9zazsTt-wvZAMou6HT2KohQyQDHz3W77zAaX64-GAadccpmX24oEb8911otjazGnuwMUuGPzvb90CKVodYLJ-p2__ed8FqfLZmo1O_wA6G38T2W0xck9N0C-LY4hXowdgwOAzEDihaq2GDjJj6fr-M9D1WzNG34B8gKMBedNV3abw0xjnNXk23liY_FCxwQAA0zCUP5RYByfNldR0vr_h3c1xjh9Wu4dPk1lijeLM08m9H2nzxuEowdbi_2Aj69qVXhAa6pIPQ7s7cbVBZCOr2tBobQ0rP2Gmz3rrctR-JS-rYDdBeH4QEBMOUDwQek8FGiu2r7KF_J9vgVFE3-oFxrGbIJu3pqkp25BnKn3BH2TZU_HcGOfJRReODvKQrfntyra9v8w2MCnd7Z5PaP8Nq981oKg5eNJmV69xvJm7Pc",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/status",
					"host": [
						"{{host}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Open_base_url",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('test', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/status",
					"host": [
						"{{host}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_all_books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('test', ()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Response', function () {\r",
							"     pm.expect(pm.response.json()).to.be.an('array');\r",
							"     pm.response.json().forEach((book) => {\r",
							"            pm.expect(book).to.have.property('id');\r",
							"            pm.expect(book).to.have.property('name');\r",
							"            pm.expect(book).to.have.property('type');\r",
							"            pm.expect(book).to.have.property('available');\r",
							"     });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"let data1=pm.response.json()\r",
							"console.log(data1)\r",
							"\r",
							"// pm.collectionVariables.set(\"id\", data1);\r",
							"// Test to generate a random number and store it in a variable\r",
							"pm.test(\"Generate a random number and store it in a variable\", function () {\r",
							"    var randomNumber = Math.floor(Math.random() * 6);\r",
							"    pm.environment.set(\"id\", randomNumber);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/books",
					"host": [
						"{{host}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"token\", pm.response.json().accessToken)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomFirstName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api-clients/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add_book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"id\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"orderid\", pm.response.json().orderId)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{id}},\r\n  \"customerName\": \"Mvm\",\r\n  \"country\":\"AZE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/orders",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_request",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/orders/:orderId",
					"host": [
						"{{host}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}